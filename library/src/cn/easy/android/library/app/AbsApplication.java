package cn.easy.android.library.app;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import android.app.Application;import android.content.Context;import cn.easy.android.library.data.BaseConstantSet;import cn.easy.android.library.task.CustomThreadFactory;import cn.easy.android.library.util.CrashHandler;import cn.easy.android.library.util.EvtLog;/** * Title: AbsApplication</p> * Description: 应用程序抽象类</p> * @author lin.xr * @date 2014-6-27 下午11:03:02 */public abstract class AbsApplication extends Application {		static final String TAG = "AbsApplication";	    static final float EXECUTOR_POOL_SIZE_PER_CORE = 1.5f;		/** 全局异常处理 */	protected CrashHandler mCrashHandler;		/** 多线程池 */	protected ExecutorService mMultiThreadExecutor;	/** 单线程池 */	protected ExecutorService mSingleThreadExecutor;	/**	 * 获取http请求代理对象	 * 	 * @return http请求代理对象	 */	public abstract AbsHttpProxy getHttpProxy();		@Override	public void onCreate() {		super.onCreate();		init();	}	/**	 * 获取应用实例对象	 * 	 * @param context	 *            上下文	 * @return 应用实例对象	 */	public static AbsApplication getApplication(Context context) {		return (AbsApplication) context.getApplicationContext();	}		/**	 * 获取多线程池执行对象	 * 	 * @return 多线程池执行对象	 */	public ExecutorService getMultiThreadExecutorService() {		if (mMultiThreadExecutor == null || mMultiThreadExecutor.isShutdown()) {			final int numThreads = Math.round(Runtime.getRuntime()					.availableProcessors() * EXECUTOR_POOL_SIZE_PER_CORE);			mMultiThreadExecutor = Executors.newFixedThreadPool(numThreads,					new CustomThreadFactory());			EvtLog.d(TAG, "MultiThreadExecutor created with " + numThreads					+ " threads");		}		return mMultiThreadExecutor;	}	/**	 * 获取单线程池执行对象	 * 	 * @return 单线程池执行对象	 */	public ExecutorService getDatabaseThreadExecutorService() {		if (mSingleThreadExecutor == null || mSingleThreadExecutor.isShutdown()) {			mSingleThreadExecutor = Executors					.newSingleThreadExecutor(new CustomThreadFactory());		}		return mSingleThreadExecutor;	}		/**	 * 应用程序初始化	 */	protected void init() {		BaseConstantSet.init(this);		mCrashHandler = CrashHandler.getInstance().init(this);	}}